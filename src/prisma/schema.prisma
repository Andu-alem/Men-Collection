
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]
  orders        Order[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  products Product[]

  @@map("category")
}

model Product {
  id          Int               @id @default(autoincrement())
  name        String
  description String            @db.VarChar
  price       Float
  quantity    Int
  imagePath   String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now())
  category    Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  Int
  orders      OrderedProducts[]

  @@map("product")
}

model Order {
  id       Int               @id @default(autoincrement())
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  products OrderedProducts[]

  @@map("order")
}

model OrderedProducts {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int

  @@map("ordered_products")
}
